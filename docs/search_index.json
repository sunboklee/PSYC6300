[
["index.html", "R, Rstudio, and ggplot2 Chapter 1 R 1.1 Why R? 1.2 Installing R 1.3 Installing RStudio 1.4 Cheat Sheets for R 1.5 Rmarkdown files 1.6 R topics covered in this course", " R, Rstudio, and ggplot2 Sunbok Lee 2019-08-25 Chapter 1 R 1.1 Why R? R is a free open source software. R is a language designed especially for statistical analysis. Many statistical methods are first implemented in R. R provides many tools for publication-quality data visualization (e.g., ggplot2). R provides many tools for data processing (or data wrangling) (e.g., dplyr, tidyr). Data come from diverse sources these days (e.g., microarray, EEG, fMRI, eyetrackers, facebook, twitter, many sensors, … ). e.g., JSON is a popular file format for data exchange: https://en.wikipedia.org/wiki/JSON e.g., Biometric research: IMotions 1.2 Installing R You can download and install a base distribution and packages (base R) from the official R webiste: https://www.r-project.org. About 14,000 packages extend the base R. R packages are collections of functions and data sets developed by the R community. They increase the power of R by improving existing base R functionalities. A list of R packages are available here:https://cran.r-project.org/web/packages/available_packages_by_name.html 1.3 Installing RStudio RStudio is an integrated development environment (IDE) for R. You can download and install the RStudio from the RStudio website: https://www.rstudio.com. A short tour to the RStudio IDE: https://www.rstudio.com/products/rstudio/. 1.4 Cheat Sheets for R RStudio provides cheat sheets for R: https://www.rstudio.com/resources/cheatsheets/. 1.5 Rmarkdown files Rmarkdown files for this materials can be downloaded here: https://github.com/sunboklee/PSYC6300 1.6 R topics covered in this course Base R tidyverse The tidyverse package was developed for more efficient data science in R. In the tidyverse package, the dplyr, tidyr, ggplot2, and purrr packages provide many useful functions for efficient data transformation, data tidying, data visualization, and iteration, respectively. Useful free R books: https://bookdown.org. R for Data Science (Wickham and Grolemund 2017) is a useful resource for the tidyverse package. References "],
["introduction-to-ggplot2.html", "Chapter 2 Introduction to ggplot2 2.1 What is ggplot2 2.2 Data 2.3 Geometric objects (geoms) 2.4 Exercise 2.5 Aesthetic mappings 2.6 Exercise 2.7 Scales 2.8 Statistical transformations (stats for short) 2.9 A faceting 2.10 Exercise 2.11 Grouping 2.12 Themes 2.13 Save a ggplot 2.14 More resources", " Chapter 2 Introduction to ggplot2 2.1 What is ggplot2 The ggplot2 package (Wickham 2016) was developed to build a graphic from few graphical components (e.g., data, coordinate systems, geometric objects, aesthetics, facets, themes) based on the grammar of graphics. “Wilkinson (2005) created the grammar of graphics to describe the deep features that underlie all statistical graphics. The grammar of graphics is an answer to a question: what is a statistical graphic? The layered grammar of graphics (Wickham, 2009) builds on Wilkinson’s grammar, focussing on the primacy of layers and adapting it for embedding within R. In brief, the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinate system. Faceting can be used to generate the same plot for different subsets of the dataset. It is the combination of these independent components that make up a graphic.” — Wickham (2016) The components of ggplot2 Data Geometric objects (geom for short) Aesthetic mappings Statistical transformations (stats for short) Scales A coordinate system (coord for short) A faceting Install the tidyverse package (or any package) using install.packages() function using the Packages pane install.packages(&quot;tidyverse&quot;) Load the tidyverse package onto memory # We need to load a package whenever we use it suppressMessages(library(tidyverse)) 2.2 Data “The data are what you want to visualise and a set of aesthetic mappings describe how variables in the data are mapped to aesthetic attributes that you can perceive.” (Wickham 2016) # diamonds is a built-in data in ggplot2 # ?diamonds display the help document for data # tibble is a datastructure in tidyverse diamonds ## # A tibble: 53,940 x 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.290 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # … with 53,930 more rows 2.3 Geometric objects (geoms) “Geometric objects, geoms for short, represent what you actually see on the plot: points, lines, polygons, etc.” (Wickham 2016) # ggplot() initializes a ggplot object. # it can be used to specify 1) a dataset, and 2) aesthetic mapping ggplot(data = diamonds, aes(x = carat, y = price)) # geom_points() adds a new layer to a plot by drawing points to produce a scatter plot ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point() # geom_smooth() adds an additional layer to the plot by drawing a smoothed line to capture the trend in the scatterplot ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point() + geom_smooth() ## `geom_smooth()` using method = &#39;gam&#39; and formula &#39;y ~ s(x, bs = &quot;cs&quot;)&#39; 2.4 Exercise typing mtcars in your console will display the content of the mtcars dataset. How can we display the help document for the mtcars data? type head(mtcars). What did head() do? Check the help document of head() (mtcar is a dataframe in base R, whereas the diamonds is a tibble in tidyverse). Using the mtcars data, plot the scatter plot between mpg (miles per gallon: y axis) and disp (displacement: x axis) with a smoothed line. 2.5 Aesthetic mappings “A set of aesthetic mappings describe how variables in the data are mapped to aesthetic properties of the layer” (Wickham 2016) “To describe the way that variables in the data are mapped to things that we can perceive on the plot (the “aesthetics”), we use the aes function. The aes function takes a list of aesthetic-variable pairs like these: aes(x = weight, y = height, colour = age). Here we are mapping x-position to weight, y-position to height and colour to age. The first two arguments can be left without names, in which case they correspond to the x and y variables.” (Wickham 2016) # color = color maps the variable &#39;color` in the dataset to the color aesthetics of points to encode further information in the graphic. ggplot(data = diamonds, aes(x = carat, y = price, color = color)) + geom_point() # shape = cut maps the variable &#39;cut` in the dataset to the shape aesthetics of points to encode further information in the graphic. # the graphic is not so informative because points are overplotted. Sometimes, facetting may handle overplotting ggplot(data = diamonds, aes(x = carat, y = price, shape = cut)) + geom_point() ## Warning: Using shapes for an ordinal variable is not advised ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point(color = &quot;blue&quot;) 2.6 Exercise mpg is similar to mtcars but is a built-in tibble in ggplot2. 1) Plot hwy (mile per gallon: y axis) against displ (engine displancement: x axis), 2) Given the plot from 1), map the class variable to color, shape, alpha, and size aesthetics. Explain what happens. ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color=drv)) + geom_point() + geom_smooth(method=&quot;lm&quot;) This is what happens when mapping hyw, displ, and cyl to x, y, and color aesthetics. R creates a new dataset that contains all the data to be displayed on the plot. x y color 1.8 29 4 1.8 29 4 2.0 31 4 2.0 30 4 2.8 26 6 2.8 26 6 3.1 27 6 1.8 26 4 1.8 25 4 2.0 28 4 2.7 Scales In the previous table, computers don’t know how to display colors based on 4, 6, … Computers need a a hexadecimal code for colors such as FF6C91. The mapping from the data to the final values that computers can use to display aesthetics is called a scale. “The scales map values in the data space to values in an aesthetic space, whether it be colour, or size, or shape. Scales draw a legend or axes, which provide an inverse mapping to make it possible to read the original data values from the graph.” (Wickham 2016) scale_x_continuous() and scale_y_continuous() are the default scales for continuous x and y aesthetics: https://ggplot2.tidyverse.org/reference/scale_continuous.html. p1 &lt;- ggplot(mpg, aes(displ, hwy)) + geom_point() p1 # change the axis labels p1 + scale_x_continuous(&quot;Engine displacement (L)&quot;) + scale_y_continuous(&quot;Highway MPG&quot;) # also use the short-cut labs() p1 + labs(x = &quot;Engine displacement (L)&quot;, y = &quot;Highway MPG&quot;) # modify the axis limits p1 + scale_x_continuous(limits = c(2, 6)) ## Warning: Removed 27 rows containing missing values (geom_point). # use the short hand functions `xlim()` and `ylim()` p1 + xlim(2, 6) ## Warning: Removed 27 rows containing missing values (geom_point). # choose where the ticks appear p1 + scale_x_continuous(breaks = c(2, 4, 6)) # choose your own labels p1 + scale_x_continuous(breaks = c(2, 4, 6), label = c(&quot;two&quot;, &quot;four&quot;, &quot;six&quot;)) ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color=drv)) + geom_point() + geom_smooth(method=&quot;lm&quot;) + labs(title =&quot;MPG vs Engine size&quot;, x = &quot;Engine size&quot;, y = &quot;MPG&quot;) # Create your own discrete scale ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color=drv)) + geom_point() + geom_smooth(method=&quot;lm&quot;) + labs(title =&quot;MPG vs Engine size&quot;, x = &quot;Engine size&quot;, y = &quot;MPG&quot;) + scale_colour_manual(name = &quot;Drive&quot;, values = c(&quot;lightpink&quot;, &quot;darkseagreen&quot;, &quot;lightblue&quot;)) ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color=cty)) + geom_point() ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color=cty)) + geom_point() + scale_colour_gradient(name = &quot;City MPG&quot;, low = &quot;red&quot;, high = &quot;blue&quot;) For more details about scales, see https://ggplot2.tidyverse.org/reference/. Colors in R: http://www.sthda.com/english/wiki/colors-in-r 2.8 Statistical transformations (stats for short) # historam shows the distribution of a single variable. # where does count come from? ggplot(data = diamonds, aes(x = carat)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. “Statistical transformations, stats for short, summarise data in many useful ways. For example, binning and counting observations to create a histogram, or summarising a 2d relationship with a linear model. Stats are optional, but very useful.” (Wickham 2016) How geom_histogram() works? “A stat takes a dataset as input and returns a dataset as output, and so a stat can add new variables to the original dataset. It is possible to map aesthetics to these new variables. For example, stat_bin, the statistic used to make histograms, produces the following variables: count, the number of observations in each bin density, the density of observations in each bin (percentage of total / bar width) x, the centre of the bin&quot; (Wickham 2016) “These generated variables can be used instead of the variables present in the original dataset. For example, the default histogram geom assigns the height of the bars to the number of observations (count), but if you’d prefer a more traditional histogram, you can use the density (density). The following example shows a density histogram of carat from the diamonds dataset.” (Wickham 2016) # The names of generated variables must be surrounded with .. ggplot(diamonds, aes(carat)) + geom_histogram(aes(y = ..density..), binwidth = 0.1) Every geom has a default stats. Position adjustments Position adjustments determine how to arrange geoms that would otherwise occupy the same space. # The discrete analogue of histogram is the bar plot s &lt;- ggplot(mpg, aes(fl, fill = drv)) s + geom_bar() # Stack elements on top of one another s + geom_bar(position = &quot;stack&quot;) # Arrange elements side by side s + geom_bar(position = &quot;dodge&quot;) # Stack elements on top of one another,normalize height s + geom_bar(position = &quot;fill&quot;) 2.9 A faceting “A faceting specification describes how to break up the data into subsets and how to display those subsets as small multiples. This is also known as conditioning or latticing/trellising.” (Wickham 2016) “There are two types of faceting provided by ggplot2: facet_grid and facet_wrap. Facet grid produces a 2d grid of panels defined by variables which form the rows and columns, while facet wrap produces a 1d ribbon of panels that is wrapped into 2d” (Wickham 2016) # facet into rows ggplot(data = diamonds, aes(x = carat)) + geom_histogram() + facet_grid(color ~ .) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # facet into columns ggplot(data = diamonds, aes(x = carat)) + geom_histogram() + facet_grid(. ~ color) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 2.10 Exercise Using mpg data, plot hwy (y) vs cty (x). facet into rows using cyl. facet into columns using cyl. facet into rows using cyl and columns using year 2.11 Grouping “In many situations, you want to separate your data into groups, but render them in the same way. When looking at the data in aggregate you want to be able to distinguish individual subjects, but not identify them. This is common in longitudinal studies with many subjects, where the plots are often descriptively called spaghetti plots.” (Wickham 2016) Oxboys is a dataset in the nlme package. Oxboys includes the height of a selection of boys from Oxford, England versus a standardized age. library(nlme) ## ## Attaching package: &#39;nlme&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## collapse # age = a numeric vector giving the standardized age head(Oxboys) ## Grouped Data: height ~ age | Subject ## Subject age height Occasion ## 1 1 -1.0000 140.5 1 ## 2 1 -0.7479 143.4 2 ## 3 1 -0.4630 144.8 3 ## 4 1 -0.1643 147.1 4 ## 5 1 -0.0027 147.7 5 ## 6 1 0.2466 150.2 6 ggplot(Oxboys, aes(age, height)) + geom_line() ggplot(Oxboys, aes(age, height, group = Subject)) + geom_line() # In many cases, this is not what we want ggplot(Oxboys, aes(age, height, group = Subject)) + geom_line() + geom_smooth() ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; # group = 1 override the default grouping ggplot(Oxboys, aes(age, height, group = Subject)) + geom_line() + geom_smooth(aes(group = 1)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; # facet is also useful for visualizing longitudinal data ggplot(Oxboys, aes(age, height)) + geom_line() + facet_wrap(~Subject) 2.12 Themes “Themes are a powerful way to customize the non-data components of your plots: i.e. titles, labels, fonts, background, gridlines, and legends.” More details are available at https://ggplot2.tidyverse.org/reference/theme.html ggplot(mpg, aes(x = hwy, y = cty)) + geom_point() ggplot(mpg, aes(x = hwy, y = cty)) + geom_point() + theme(panel.background = element_rect(fill = &quot;white&quot;, colour = &quot;grey50&quot;)) ggplot(mpg, aes(x = hwy, y = cty)) + geom_point() + theme_classic() 2.13 Save a ggplot ggsave() is a convenient function for saving a plot. It defaults to saving the last plot that you displayed. ggsave(&quot;mtcars.pdf&quot;) ## Saving 7 x 5 in image 2.14 More resources ggplot2 Reference: https://ggplot2.tidyverse.org/reference/index.html Many R galleries (e.g., https://www.r-graph-gallery.com) Google References "],
["descriptive-statistics.html", "Chapter 3 Descriptive Statistics 3.1 R functions for descriptive statistics 3.2 qplot() 3.3 Scatterplots 3.4 Histogram 3.5 Density plots 3.6 Barplots 3.7 Boxplots 3.8 Faceting 3.9 The corrplot Package", " Chapter 3 Descriptive Statistics 3.1 R functions for descriptive statistics # compute mean # we use $ to access `price` variable in the `diamonds` dataset mean(diamonds$price) ## [1] 3932.8 # compute median median(diamonds$price) ## [1] 2401 # compute variance var(diamonds$price) ## [1] 15915629 # compute standard deviation sd(diamonds$price) ## [1] 3989.44 # summary of a data frame summary(diamonds) ## carat cut color clarity ## Min. :0.2000 Fair : 1610 D: 6775 SI1 :13065 ## 1st Qu.:0.4000 Good : 4906 E: 9797 VS2 :12258 ## Median :0.7000 Very Good:12082 F: 9542 SI2 : 9194 ## Mean :0.7979 Premium :13791 G:11292 VS1 : 8171 ## 3rd Qu.:1.0400 Ideal :21551 H: 8304 VVS2 : 5066 ## Max. :5.0100 I: 5422 VVS1 : 3655 ## J: 2808 (Other): 2531 ## depth table price x ## Min. :43.00 Min. :43.00 Min. : 326 Min. : 0.000 ## 1st Qu.:61.00 1st Qu.:56.00 1st Qu.: 950 1st Qu.: 4.710 ## Median :61.80 Median :57.00 Median : 2401 Median : 5.700 ## Mean :61.75 Mean :57.46 Mean : 3933 Mean : 5.731 ## 3rd Qu.:62.50 3rd Qu.:59.00 3rd Qu.: 5324 3rd Qu.: 6.540 ## Max. :79.00 Max. :95.00 Max. :18823 Max. :10.740 ## ## y z ## Min. : 0.000 Min. : 0.000 ## 1st Qu.: 4.720 1st Qu.: 2.910 ## Median : 5.710 Median : 3.530 ## Mean : 5.735 Mean : 3.539 ## 3rd Qu.: 6.540 3rd Qu.: 4.040 ## Max. :58.900 Max. :31.800 ## 3.2 qplot() qplot(), short for quick plot is a function in the ggplot2 package. qplot makes it easy to produce complex plots, often requiring several lines of code using other plotting systems, in one line. 3.3 Scatterplots ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() qplot(displ, hwy, data = mpg) ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) + geom_point() qplot(displ, hwy, data = mpg, color = class) ggplot(data = mpg, aes(x = displ, y = hwy, color = class, shape = drv)) + geom_point() qplot(displ, hwy, data = mpg, color = class, shape = drv) ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + geom_smooth(method = &quot;lm&quot;) qplot(displ, hwy, data = mpg, geom = c(&quot;point&quot;, &quot;smooth&quot;)) ## `geom_smooth()` using method = &#39;loess&#39; and formula &#39;y ~ x&#39; 3.4 Histogram ggplot(data = diamonds, aes(x = carat)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. qplot(carat, data = diamonds, geom = &quot;histogram&quot;) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ggplot(data = diamonds, aes(x = carat)) + geom_histogram(binwidth = 0.05) + xlim(c(0,3)) ## Warning: Removed 32 rows containing non-finite values (stat_bin). ## Warning: Removed 2 rows containing missing values (geom_bar). qplot(carat, data = diamonds, geom = &quot;histogram&quot;, binwidth = 0.05, xlim = c(0,3)) ## Warning: Removed 32 rows containing non-finite values (stat_bin). ## Warning: Removed 2 rows containing missing values (geom_bar). ggplot(data = mpg, aes(x = hwy, fill = drv)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. qplot(hwy, data = mpg, geom = &quot;histogram&quot;, fill = drv) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 3.5 Density plots ggplot(data = diamonds, aes(x = carat, color = color)) + geom_density() qplot(carat, data = diamonds, geom = &quot;density&quot;, color = color) 3.6 Barplots ggplot(data = diamonds, aes(x = clarity)) + geom_bar() qplot(clarity, data = diamonds, geom = &quot;bar&quot;) ggplot(data = diamonds, aes(x = clarity, fill = cut)) + geom_bar() qplot(clarity, data = diamonds, geom = &quot;bar&quot;, fill = cut) 3.7 Boxplots ggplot(data = diamonds, aes(y = price)) + geom_boxplot() qplot(y = price, data = diamonds, geom = &quot;boxplot&quot;) ggplot(data = diamonds, aes(x = cut, y = price)) + geom_boxplot() 3.8 Faceting ggplot(data = diamonds, aes(x = carat, y = price)) + geom_point() + facet_grid(cut ~ color) qplot(carat, price, data = diamonds, facets = cut ~ color) 3.9 The corrplot Package https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html “The corrplot package is a graphical display of a correlation matrix, confidence interval. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.” library(corrplot) ## corrplot 0.84 loaded corrplot.mixed(cor(mtcars)) "],
["exercise-3.html", "Chapter 4 Exercise", " Chapter 4 Exercise Exercise 1: midwest is a dataset in ggplot2, and contains demographic information of midwest counties. Replicate the following scatterplot as close as you can. The variable for the x-axis, y-axis, color aesthetic, size aesthetic are area, poptotal, state, and popdensity. Excercise 2: Replicate the following barplot using the mpg dataset. Use theme(axis.text.x = element_text(angle=65, vjust=0.6)). Check why we need this theme by plotting with and without this theme. You also need width = 0.5 option in a geom to have more space between bar. "],
["base-r.html", "Chapter 5 Base R 5.1 Topics 5.2 Further reading 5.3 Interaction with R 5.4 R Objects and Variables 5.5 Data Structure 5.6 Vectors Come in Two Flavours 5.7 A Vector Has Three Properties 5.8 Attributes 5.9 Type Coercion (Conversion) 5.10 NA represents missing 5.11 Useful Functions for a vector 5.12 Exercise on vectors 5.13 Factors 5.14 Matrices and Arrays 5.15 Data Frames 5.16 Operators 5.17 Subsetting a List 5.18 Subsetting a Matrix and Array 5.19 Exercise 5.20 Combine Matrices by Columns or Rows 5.21 Names of the Columns and Rows of Matrices 5.22 Functions 5.23 An Example of Functions 5.24 User-Defined Functions 5.25 Exercise 5.26 Some Comments on Functions 5.27 Generating Sequences 5.28 Control Flow (if-else) 5.29 Control Flow (for) 5.30 Control Flow (for)", " Chapter 5 Base R suppressMessages(library(tidyverse)) 5.1 Topics R Objects and Variables Data Structure Sub-Setting Functions Control Flow (if, for, while) 5.2 Further reading Wickham, H. (2014). Advanced R. Chapman and Hall/CRC http://adv-r.had.co.nz This is a nice book to read after you become comfortable in base R (not required in this course) 5.3 Interaction with R R Console: for easy interactive exploration of ideas R Script file (.R): for sequence of R commands R markdown (.Rmd): for reproducible and dynamic reports 5.4 R Objects and Variables Everything in R is stored as an object, which is associated with a variable name. An object is a technical terminology defined in Object Oriented Programming (OOP). (OOP is an important concept but not in this class) A variable name can be assigned to an object using the assignment operator. # store a number to a variable named `a` a &lt;- 0.2 # print a a ## [1] 0.2 # store a vector to a variable named `b` b &lt;- c(1,4,9) # print b b ## [1] 1 4 9 z &lt;- 5 i &lt;- (z * 2 + 45)/2 i ## [1] 27.5 We can think of the assignment operation as “evaluate whatever is given on the right side of the operator, and assign (store) the result (an object of some type) of this evaluation in the variable whose name is given on the left side 5.5 Data Structure R has base data structures. Almost all other objects are built upon base data structures. R base data structures can be organized by their dimensionality: Dimension Homogeneous Heterogeneous 1D Atomic vector List 2D Matrix Data frame nD Array 5.6 Vectors Come in Two Flavours Atomic vectors (homogeneous) All elements of an atomic vector must be the same type. There are 6 types of an atomic vector Logical (TRUE or FALSE), integer, double, and character (+ rarely used complex and raw) Atomic vectors are usually created with c(), short for combine: a &lt;- c(TRUE, FALSE, T, F) # logical a &lt;- c(1L, 6L, 5L) # integer a &lt;- c(1, 2.5, 3.8) # double a &lt;- c(&quot;apple&quot;, &quot;orange&quot;) # character Lists (heterogeneous) Lists are different from atomic vectors because their elements can be of any type. List are created by list() &gt; x &lt;- list(1:3, &quot;a&quot;, c(TRUE, FALSE)) 5.7 A Vector Has Three Properties Type: typeof() returns the type of an object. typeof(c(1,2,3)) ## [1] &quot;double&quot; Length: length() returns the number of elements in a vector length(c(1,2,3)) ## [1] 3 Attributes: attributes() returns additional arbitrary metadata attributes(c(1,2,3)) ## NULL 5.8 Attributes All objects can have attributes to store metadata about the object. Attributes can be considered as a named list. Attributes can be accessed individually with attr() or all at once with attributes(). Names are attributes of a vector. You can name a vector in two ways: a &lt;- c(x=1,y=2,z=3) # when creating names(a) ## [1] &quot;x&quot; &quot;y&quot; &quot;z&quot; names(a) &lt;- c(&quot;l&quot;, &quot;m&quot;, &quot;n&quot;) # by modifying existing names a ## l m n ## 1 2 3 attributes(a) # names are attributes ## $names ## [1] &quot;l&quot; &quot;m&quot; &quot;n&quot; attributes(mtcars) ## $names ## [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; ## [11] &quot;carb&quot; ## ## $row.names ## [1] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; ## [4] &quot;Hornet 4 Drive&quot; &quot;Hornet Sportabout&quot; &quot;Valiant&quot; ## [7] &quot;Duster 360&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; ## [10] &quot;Merc 280&quot; &quot;Merc 280C&quot; &quot;Merc 450SE&quot; ## [13] &quot;Merc 450SL&quot; &quot;Merc 450SLC&quot; &quot;Cadillac Fleetwood&quot; ## [16] &quot;Lincoln Continental&quot; &quot;Chrysler Imperial&quot; &quot;Fiat 128&quot; ## [19] &quot;Honda Civic&quot; &quot;Toyota Corolla&quot; &quot;Toyota Corona&quot; ## [22] &quot;Dodge Challenger&quot; &quot;AMC Javelin&quot; &quot;Camaro Z28&quot; ## [25] &quot;Pontiac Firebird&quot; &quot;Fiat X1-9&quot; &quot;Porsche 914-2&quot; ## [28] &quot;Lotus Europa&quot; &quot;Ford Pantera L&quot; &quot;Ferrari Dino&quot; ## [31] &quot;Maserati Bora&quot; &quot;Volvo 142E&quot; ## ## $class ## [1] &quot;data.frame&quot; 5.9 Type Coercion (Conversion) All elements of a vector must belong to the same base data type. If that is not true, R will automatically force it by type coercion. v &lt;- c(4, 7, 23.5, 76.2, 80, &quot;rrt&quot;) v ## [1] &quot;4&quot; &quot;7&quot; &quot;23.5&quot; &quot;76.2&quot; &quot;80&quot; &quot;rrt&quot; typeof(v) ## [1] &quot;character&quot; Functions can automatically convert data type. sum(c(TRUE, FALSE, TRUE)) ## [1] 2 You can explicitly convert data type with as.character(), as.double(), as.integer(), and as.logical(). a &lt;- c(1,2,3) a ## [1] 1 2 3 b &lt;- as.character(a) b ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; 5.10 NA represents missing u &lt;- c(4, 6, NA, 2) u ## [1] 4 6 NA 2 k &lt;- c(TRUE, FALSE, FALSE, NA, TRUE) k ## [1] TRUE FALSE FALSE NA TRUE 5.11 Useful Functions for a vector 5.11.1 Generate a vector # we can manually type the element of a vector using c() a &lt;- c(1,2,3,4,5) a ## [1] 1 2 3 4 5 # c() also combine vectors a &lt;- c(1,2,3) b &lt;- c(4,5,6) c &lt;- c(a, b) c ## [1] 1 2 3 4 5 6 # k:n generates a vector whose elements are the sequence of numbers from k to n 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 # seq() generates regular sequence # seq(from, to) seq(1, 10) ## [1] 1 2 3 4 5 6 7 8 9 10 # seq(from, to, by) seq(1, 10, 2) ## [1] 1 3 5 7 9 # rep(x, times) replicates the values in x multiple times # x can be a number or vector # replicates 1 5 times rep(1, 5) ## [1] 1 1 1 1 1 # replicates c(1, 2) 5 times rep(c(1,2), 5) ## [1] 1 2 1 2 1 2 1 2 1 2 # each element of c(1,2) is repeated 5 times rep(c(1,2), each = 5) ## [1] 1 1 1 1 1 2 2 2 2 2 # rnorm(n, mean = 0, sd = 1) generates a vector of n random samples # from a normal distribution with specific mean and sd. rnorm(100) ## [1] 0.33760059 -0.14142030 -0.28558706 -1.83422531 0.04678454 ## [6] -0.42237832 0.09092671 0.54076673 0.49414132 0.19433004 ## [11] -0.26195963 -2.33148419 0.12895836 -1.71154304 -2.29815270 ## [16] -0.02852800 -1.21885843 -1.47633677 1.41816731 -0.10594578 ## [21] -1.68756770 -0.52725647 -1.50245612 1.13555234 0.70478160 ## [26] 0.98916347 -0.10350017 -1.29603259 2.33289364 -0.78226345 ## [31] -0.63788315 0.67217885 -0.87275706 0.20242142 -1.62530909 ## [36] -1.86551435 1.45843565 -0.63219407 0.22574265 -1.90748147 ## [41] -0.67185477 -0.11029494 0.47198369 0.51643723 -0.07301675 ## [46] 0.97435074 -0.80539272 -0.68013727 -0.75932833 1.66637329 ## [51] 0.20808594 -0.06865262 0.61764124 -0.45868094 -1.33652922 ## [56] -1.02537210 -0.22605688 -0.94734502 -0.51656126 -1.27492667 ## [61] 1.66370581 -1.06722775 0.90205905 1.32163320 0.50488881 ## [66] -1.10860112 -1.12790663 0.50577976 0.18419761 -0.46981381 ## [71] -1.36772752 -1.12947463 0.55911093 -1.32498246 -1.58267856 ## [76] -0.61232570 1.39227675 -0.47520206 0.22966300 0.01437993 ## [81] -1.22349949 0.88920245 -1.23937202 1.33903702 0.02146513 ## [86] 0.46736175 -0.28020695 0.81612818 0.33200716 -0.65299857 ## [91] -0.22163817 0.82639776 -0.14529059 0.07640067 0.22024541 ## [96] -0.01919679 1.55752527 0.50379213 -0.53782513 -1.30565310 qplot(rnorm(10000)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. # runif(n, min, max) generates a vector of n random samples # from a uniform distribution whose limits are min and max. runif(100, 0, 1) ## [1] 0.18909512 0.73306539 0.19890507 0.56334534 0.23996343 0.87857517 ## [7] 0.59990317 0.28542410 0.48295437 0.72976725 0.21096852 0.48505685 ## [13] 0.36306219 0.73728268 0.33868366 0.60690616 0.93819962 0.36978780 ## [19] 0.93974560 0.14310909 0.10156290 0.59160644 0.14500985 0.44913154 ## [25] 0.26193867 0.16227114 0.09257387 0.93796116 0.92165081 0.84001355 ## [31] 0.05403981 0.90099734 0.41245713 0.63325263 0.31027484 0.15661161 ## [37] 0.79565650 0.56414653 0.72195515 0.31975878 0.82893770 0.10827721 ## [43] 0.94538222 0.02732790 0.28698416 0.90493729 0.74813311 0.68221999 ## [49] 0.20462378 0.14863127 0.61003688 0.23636594 0.63373243 0.66649399 ## [55] 0.33923452 0.31454352 0.88796554 0.12959418 0.25146632 0.15653286 ## [61] 0.00284600 0.32594992 0.24794767 0.74266185 0.09320303 0.76426763 ## [67] 0.05087525 0.23419436 0.61021027 0.75944898 0.84149282 0.30997512 ## [73] 0.57519302 0.30298492 0.46484665 0.88623652 0.31559121 0.14429948 ## [79] 0.03141769 0.81646037 0.95845745 0.57764526 0.76095144 0.04319775 ## [85] 0.21476310 0.79867118 0.41556040 0.74546414 0.47011463 0.96656700 ## [91] 0.15360554 0.06099842 0.70662881 0.64232145 0.39671330 0.99534023 ## [97] 0.77881918 0.37381385 0.32967677 0.23608483 qplot(runif(10000, 0, 1)) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 5.11.2 Indexing or subsetting a Vector You can access a particular element of a vector through an index between square brackets or indexing (subsetting) operator. Positive integers return elements at the specified positions. x &lt;- c(2,3,4,5,6,7) x[c(3,1)] ## [1] 4 2 Negative integers omit elements at the specified positions: x[-c(3,1)] ## [1] 3 5 6 7 Logical vectors select elements where the corresponding logical value is TRUE. This logical indexing is very useful because we can subset a vector or dataframe based on conditions. x[c(TRUE, TRUE, FALSE, FALSE, TRUE, TRUE)] ## [1] 2 3 6 7 x &gt; 3 ## [1] FALSE FALSE TRUE TRUE TRUE TRUE # This is called a logical indexing, which is a very powerful tool. # &gt; : greater than (Logical Operators) x[x &gt; 3] ## [1] 4 5 6 7 x[x &gt; 3 &amp; x &lt; 5] ## [1] 4 # %in% operator # v1 %in% v2 returns a logical vector indicating # whether the elements of v1 are included in v2. c(1,2,3) %in% c(2,3,4,5,6) ## [1] FALSE TRUE TRUE a &lt;- c(1,2,3,4,5) a ## [1] 1 2 3 4 5 # we replace an element of a vector using the indexing and assignment operators. a[3] &lt;- 100 a ## [1] 1 2 100 4 5 a[c(1,5)] &lt;- 100 a ## [1] 100 2 100 4 100 a &lt;- c(1,2,3,NA,5,6,NA) a ## [1] 1 2 3 NA 5 6 NA # is.na indicates which elements are missing is.na(a) # returns TRUE when missing ## [1] FALSE FALSE FALSE TRUE FALSE FALSE TRUE # Type conversion: TRUE and FALSE will be converted into 1 and 0, respectively. # This expression answers the question: How many NSs are in a? sum(is.na(a)) ## [1] 2 # !x = not x (negation) !is.na(a) # returns TRUE when not missing ## [1] TRUE TRUE TRUE FALSE TRUE TRUE FALSE # This expression answers the question: How many non-NSs are in a? sum(!is.na(a)) ## [1] 5 # logical indexing a[is.na(a)] &lt;- 999 a ## [1] 1 2 3 999 5 6 999 # create a vector with names a &lt;- c(x = 1, y = 2, z = 3) a ## x y z ## 1 2 3 # named vector can be indexed using their names a[c(&quot;x&quot;, &quot;z&quot;)] ## x z ## 1 3 # R uses a &quot;recycling rule&quot; by repeating the shorter vector # In this example, R recycled c(TRUE, FALSE) to produce c(TRUE, FALSE, TRUE, FALSE) i &lt;- c(TRUE, FALSE) a &lt;- c(1,2,3,4) a[i] ## [1] 1 3 # R uses a &quot;recycling rule&quot; by repeating the shorter vector v1 &lt;- c(4,5,6,7) v2 &lt;- c(10,10) v1+v2 ## [1] 14 15 16 17 5.11.3 Arrange a vector # sort(x, decreasing = FALSE) # By default, sort() sorts ascending order. sort(c(5,6,4)) ## [1] 4 5 6 # sorts into descending order sort(c(5,6,4), decreasing = TRUE) ## [1] 6 5 4 # rev() provides a reversed version of its argument rev(c(5,6,4)) ## [1] 4 6 5 # rank() returns the sample ranks of the elements in a vector rank(c(5,6,4)) ## [1] 2 3 1 # order() returns a permutation which rearranges # its first argument into ascending or descending order. # What this means is order(c(5,6,4)) # 1) first sorts a vector in ascending order to produce c(4,5,6) # 2) and returns the indices of the sorted element in the original vector. # e.g., we have 3 first b/c the index of 4 in the original vector is 3 # e.g., we have 1 first b/c the index of 5 in the original vector is 1 # e.g., we have 2 first b/c the index of 6 in the original vector is 2 order(c(5,6,4)) ## [1] 3 1 2 # We use order() to sort a vector or dataframe a &lt;- c(5,6,4) a[order(a)] ## [1] 4 5 6 # sort a dataframe head(mtcars[order(mtcars$mpg), ]) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Cadillac Fleetwood 10.4 8 472 205 2.93 5.250 17.98 0 0 3 4 ## Lincoln Continental 10.4 8 460 215 3.00 5.424 17.82 0 0 3 4 ## Camaro Z28 13.3 8 350 245 3.73 3.840 15.41 0 0 3 4 ## Duster 360 14.3 8 360 245 3.21 3.570 15.84 0 0 3 4 ## Chrysler Imperial 14.7 8 440 230 3.23 5.345 17.42 0 0 3 4 ## Maserati Bora 15.0 8 301 335 3.54 3.570 14.60 0 1 5 8 5.11.4 Vectorization of Functions One of the most powerful aspects of R is the vectorization of functions. Many R functions can be applied to a vector of values producing an equal-sized vector of results. v &lt;- c(1,4,25) sqrt(v) ## [1] 1 2 5 v &lt;- c(1,2,3) v^2 ## [1] 1 4 9 v1 &lt;- c(4,5,6,7) v2 &lt;- c(10,2,1,2) v1+v2 ## [1] 14 7 7 9 # R uses a &quot;recycling rule&quot; by repeating the shorter vector v1 &lt;- c(4,5,6,7) v2 &lt;- c(10,2) v1+v2 ## [1] 14 7 16 9 # mean will be subtracted from every element of v1 v1 &lt;- c(1,2,3,4) v1 - mean(v1) ## [1] -1.5 -0.5 0.5 1.5 5.11.5 Some more functions # table() creates a frequency table a &lt;- c(1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4) table(a) ## a ## 1 2 3 4 ## 2 3 3 5 # unique() returns a vector of unique elements unique(a) ## [1] 1 2 3 4 a &lt;- c(1,2,3,NA,5) # By default, mean() produces NA when there&#39;s NAs in a vector mean(a) ## [1] NA # na.rm = TRUE removes NAs before computation mean(a, na.rm = TRUE) ## [1] 2.75 5.12 Exercise on vectors mtcars is a dataframe about fuel economy of various cars. In the dataset, mpg represents miles per gallon. mtcars$mpg allows us to access the mpg variable in the mtcars dataframe. a &lt;- mtcars$mpg Calculate the length of the vector a. Calculate the mean of a using sum() and length() functions. Calculate the mean of a using mean() function. Calculate the variance of a using sd() function. Calculate the variance of a using var() function. Calculate the variance of a by directly calculating the following expression: \\([(a_1 - \\bar{a})^2 + (a_2 - \\bar{a})^2 + ... (a_n - \\bar{a})^2]/(n-1)\\), where \\(a = (a_1, a_2, ... , a_n)\\) Standardize the vector a, i.e., \\(z = \\frac{x-\\bar{x}}{sd(x)}\\). Use scale() function to standardize a and compare the results with your manual calculation. Calculate the difference between the largest and smallest numbers in a. Normalize the vector a, i.e., \\(n = \\frac{(x-min(x))}{(max(x)-min(x))}\\). Plot the histogram of a using qplot(). How many elements in a are larger than 20? (use length()) How many elements in a are larger than 20? (use sum()) txhousing is a tibble in ggplot2 containing information about the housing market in Texas provided by the TAMU real estate center. In the dataset, median represents median sale price. txhousing$median allows us to access the median variable in the txhousing tibble (or dataframe). b &lt;- txhousing$median Calculate the length of the vector b. how many missing values (or NAs) are in b? Calculate the mean of b using sum() and length() functions. Calculate the mean of b using mean() function. Are the two means same? If not, Why? How do we get the same result? Calculate the variance of b using sd() function. Calculate the variance of b using var() function. Plot the histogram of b using qplot(). Create a new vector c by removing all missing from b. (Using c) What percentage of houses has median sale price larger than $200000? 5.13 Factors A factor is a vector that can contain only predefined values, and is used to store categorical data. Factors are built on integer vectors using two attributes the class(), “factor”, which make factors behave differently from regular integer vectors, and the levels(), which set the set of predefined values that x might have taken. x &lt;- factor(c(1,2,2,1,1,2), levels = c(1,2), labels = c(&quot;male&quot;, &quot;female&quot;)) x ## [1] male female female male male female ## Levels: male female class(x) ## [1] &quot;factor&quot; levels(x) ## [1] &quot;male&quot; &quot;female&quot; # access an object&#39;s attributes. attributes(x) ## $levels ## [1] &quot;male&quot; &quot;female&quot; ## ## $class ## [1] &quot;factor&quot; # the factor x can only take a pre-defined value (or level): male or female # You can&#39;t assign values that are not in the levels x[1] &lt;- &quot;female&quot; x ## [1] female female female male male female ## Levels: male female 5.14 Matrices and Arrays matrices and arrays are implemented as vectors with special attributes Adding a dim() attribute to an atomic vector allows it to behave like a multi-dimensional array. a &lt;- 1:6 a ## [1] 1 2 3 4 5 6 # Get or set specific attributes of an object. attr(a, &quot;dim&quot;) &lt;- c(3,2) a ## [,1] [,2] ## [1,] 1 4 ## [2,] 2 5 ## [3,] 3 6 # by default, a matrix is filled by column a &lt;- matrix(1:6, ncol=3, nrow=2) a ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 a &lt;- matrix(1:6, ncol=3) a ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 # a matrix can be filled by row using `byrow = TRUE` a &lt;- matrix(1:6, ncol=3, nrow=2, byrow = TRUE) a ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 attributes(a) ## $dim ## [1] 2 3 dim(a) ## [1] 2 3 b &lt;- array(1:12, c(2,3,2)) b ## , , 1 ## ## [,1] [,2] [,3] ## [1,] 1 3 5 ## [2,] 2 4 6 ## ## , , 2 ## ## [,1] [,2] [,3] ## [1,] 7 9 11 ## [2,] 8 10 12 dim(b) ## [1] 2 3 2 length() generalises to nrow() and ncol() for matrices, and dim() for arrays. names() generalises to rownames() and colnames() for matrices, and dimnames(), a list of character vectors, for arrays. results &lt;- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4, byrow = TRUE) colnames(results) &lt;- c(&quot;1qrt&quot;, &quot;2qrt&quot;, &quot;3qrt&quot;, &quot;4qrt&quot;) rownames(results) &lt;- c(&quot;store1&quot;, &quot;store2&quot;) results ## 1qrt 2qrt 3qrt 4qrt ## store1 10 30 40 50 ## store2 43 56 21 30 5.15 Data Frames A data frame is a list of equal-length vectors. A data frame is the most common way of storing data in R. df &lt;- data.frame(x=1:3, y=c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;)) df ## x y ## 1 1 a ## 2 2 b ## 3 3 c # display the internal structure of an R object str(df) ## &#39;data.frame&#39;: 3 obs. of 2 variables: ## $ x: int 1 2 3 ## $ y: Factor w/ 3 levels &quot;a&quot;,&quot;b&quot;,&quot;c&quot;: 1 2 3 data.frame() converts strings into factors by default. This default setting can cause serious problems in some cases. stringAsFactors = FALSE suppresses this default setting. Using str() to check data types is always a good practice. df &lt;- data.frame(x=1:3, y=c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;), stringsAsFactors = FALSE) str(df) # display the internal structure of an R object ## &#39;data.frame&#39;: 3 obs. of 2 variables: ## $ x: int 1 2 3 ## $ y: chr &quot;a&quot; &quot;b&quot; &quot;c&quot; 5.16 Operators Arithmetic Operators Operator Description + addition - subtraction * multiplication / division ^ or ** exponentiation Logical Operators Operator Description &lt; less than &lt;= less than or equal to &gt; greater than &gt;= greater than equal to == exactly equal to != not equal to !x Not x x|y x OR y x&amp;Y x AND y 1 == 2 ## [1] FALSE &quot;a&quot; != &quot;b&quot; ## [1] TRUE (1 == 2) | (&quot;a&quot; != &quot;b&quot;) ## [1] TRUE (1 == 2) &amp; (&quot;a&quot; != &quot;b&quot;) ## [1] FALSE 5.17 Subsetting a List Subsetting a list works in the same way as subsetting an atomic vector. Using [ ] will always return a list; [[ ]] and $ let you pull out the components of the list. my.lst &lt;- list(stud.id=34453, # creat a list stud.name=&quot;John&quot;, stud.marks=c(14.3,12,15,19)) my.lst ## $stud.id ## [1] 34453 ## ## $stud.name ## [1] &quot;John&quot; ## ## $stud.marks ## [1] 14.3 12.0 15.0 19.0 # [ ] extracts a sub-list my.lst[1] ## $stud.id ## [1] 34453 typeof(my.lst[1]) ## [1] &quot;list&quot; # [[ ]] extracts the value of an individual element my.lst[[1]] ## [1] 34453 typeof(my.lst[[1]]) ## [1] &quot;double&quot; # In the case of lists with named elements # $ extracts the value of an individual element my.lst$stud.id ## [1] 34453 typeof(my.lst$stud.id) ## [1] &quot;double&quot; 5.18 Subsetting a Matrix and Array You can supply 1d index for each dimension. a &lt;- matrix(1:9, nrow = 3) colnames(a) &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;) a ## A B C ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 a[c(TRUE, FALSE, TRUE), c(&quot;B&quot;, &quot;A&quot;)] ## B A ## [1,] 4 1 ## [2,] 6 3 a[1, c(2,3)] ## B C ## 4 7 # If you omit any dimension, you obtain full columns or rows a[2,] ## A B C ## 2 5 8 a[,3] ## [1] 7 8 9 a ## A B C ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 a &gt; 3 ## A B C ## [1,] FALSE TRUE TRUE ## [2,] FALSE TRUE TRUE ## [3,] FALSE TRUE TRUE a[a&gt;3] &lt;- NA a ## A B C ## [1,] 1 NA NA ## [2,] 2 NA NA ## [3,] 3 NA NA 5.19 Exercise mtcars is a fuel economy dataset. Subset the mtcars dataset such that you only keep mpg, cyl, and gear variables with 6 cylinders. Subset the mtcars dataset such that you only keep mpg, cyl, disp, hp, dart, wt, qsec, and am variables with 4 or 6 cylinders. Subset the mtcars dataset such that you only keep mpg, cyl, disp, hp, dart, wt, qsec, and am variables with 4 or 6 cylinders, and mpg larger than 20. 5.20 Combine Matrices by Columns or Rows # combine by columns cbind(a,a) ## A B C A B C ## [1,] 1 NA NA 1 NA NA ## [2,] 2 NA NA 2 NA NA ## [3,] 3 NA NA 3 NA NA # combine by rows rbind(a,a) ## A B C ## [1,] 1 NA NA ## [2,] 2 NA NA ## [3,] 3 NA NA ## [4,] 1 NA NA ## [5,] 2 NA NA ## [6,] 3 NA NA 5.21 Names of the Columns and Rows of Matrices colnames(a) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; rownames(a) &lt;- c(&quot;D&quot;, &quot;E&quot;, &quot;F&quot;) rownames(a) ## [1] &quot;D&quot; &quot;E&quot; &quot;F&quot; 5.22 Functions R functions are a special type of R object designed to carry out some operation. R functions, like mathematical functions, are applied to some set of arguments and produce a result. output = function_name(argument) In R, both the arguments that we provide when we call the function and the result of the function execution are R objects whose type will depend on the function. R functions range from simple objects implementing some standard calculation, e.g. calculating the square root of a number, to more complex functions that can obtain some model of a dataset, e.g. a neural network. 5.23 An Example of Functions # call (execute or run) the mean() function mean(c(1,2,3,4)) ## [1] 2.5 # a will store the object returned by the mean() a &lt;- mean(c(1,2,3,4)) # mean() will not work with NA mean(c(1,2,NA,4)) ## [1] NA # When na.rm = TRUE, NA will be removed before computation mean(c(1,2,NA,4), na.rm = TRUE) ## [1] 2.333333 5.24 User-Defined Functions We can write our own functions easily function.name &lt;- function(arg1, arg2, arg3){body} # Define se() function that calculate the standard error se &lt;- function(x) { v &lt;- var(x) n &lt;- length(x) return(sqrt(v/n)) } mySample &lt;- rnorm(n=100, mean=20, sd=4) se(mySample) ## [1] 0.4150195 5.25 Exercise The follow code will generate two numeric vectors randomly sampled from N(0,1) and N(3,2). x1 &lt;- rnorm(100, mean=0, sd=1) # generate 100 random numbers from Normal(0,1) x2 &lt;- rnorm(100, mean=3, sd=2) # generate 100 random numbers from Normal(3,2) Write your own function that returns (simplified) Cohen’s d = \\(\\frac{mean(x_2)-mean(x_1)}{sd(x_1)}\\). Specifically, your function should get the above two vectors x1 and x2 as function arguments and return d. For fun, let’s use your own name as the name of this function. Check whether your function actually work by running your_name(x1,x2). 5.26 Some Comments on Functions Functions are a fundamental building block of R. We can creat our own functions, but we usually use functions made by others. Packages are a collection of functions made by others. In many cases, our job is to build a pipeline of data flow by connecting many available functions. To do that, we have to handle the input objects (argument) and output objects (returned objects) of functions, which requires knowledge about data structure (e.g., creating, subsetting). 5.27 Generating Sequences # creating a vector containing integers between 1 and 10 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 5:0 ## [1] 5 4 3 2 1 0 seq(from=1, to=3, by=0.5) ## [1] 1.0 1.5 2.0 2.5 3.0 # rep() replicates each term in formula rep(5,3) ## [1] 5 5 5 rep(1:2, 3) ## [1] 1 2 1 2 1 2 rep(1:2, each=3) ## [1] 1 1 1 2 2 2 # gl() generates sequences involving factors # gl(k,n), k = the number of levels, # n = the number of repetitions. gl(5,3) ## [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 ## Levels: 1 2 3 4 5 5.28 Control Flow (if-else) Control flow = the order in which individual statement are executed (or evaluated) Selection if (condition) expression: If the condition is TRUE, the expression gets executed. if (condition) expression1 else expression2: The else part is only executed if the condition if FALSE. x &lt;- -5 if (x&gt;0) { print(&quot;Positive number&quot;) } else { print(&quot;Negative number&quot;) } ## [1] &quot;Negative number&quot; 5.29 Control Flow (for) for (value in sequence) {statements} for loop allows us to repeat (loop) through the elements in a vector and run the code inside the block within curly brackets. for (i in 1:3) { print(i^2) } ## [1] 1 ## [1] 4 ## [1] 9 5.30 Control Flow (for) # count the number of even numbers x &lt;- c(2,5,3,9,8,11,6) count &lt;- 0 for (val in x) { if(val %% 2 == 0) count = count+1 } print(count) ## [1] 3 "]
]
